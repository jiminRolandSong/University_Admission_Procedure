type: edu
files:
- name: university.py
  visible: true
  text: |
    # write your code here
    first = float(input())
    second = float(input())
    third = float(input())
    score = (first + second + third) / 3.0
    print(score)
    if score >= 60:
        print("Congratulations, you are accepted!")
    else:
        print("We regret to inform you that we will not be able to offer you admission.")
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/application_list.py
  visible: false
  text: |-
    application_list = """Jermine Brunton 3.71 Physics Engineering Mathematics
    Justo Mirfin 3.14 Engineering Biotech Chemistry
    Uzma Naysmythe 3.28 Chemistry Engineering Mathematics
    Koury Wingo 3.51 Engineering Biotech Mathematics
    Kentrell Hillhouse 2.58 Mathematics Engineering Biotech
    Trica Macalpine 3.90 Engineering Mathematics Biotech
    Sang Muldoon 3.42 Physics Mathematics Engineering
    Laney Braithwaite 3.81 Physics Chemistry Mathematics
    Spring Burridge 3.55 Mathematics Chemistry Engineering
    Delta Fanny 2.62 Chemistry Physics Mathematics
    Elen Ashbury 3.28 Mathematics Chemistry Biotech
    Ruthanne Scaife 3.79 Engineering Biotech Mathematics
    Jaemi Hallets 3.61 Physics Engineering Mathematics
    Artavious Fay 3.05 Engineering Biotech Chemistry
    Franki Dinnis 3.21 Chemistry Biotech Mathematics
    Marlynn Favell 3.81 Engineering Biotech Mathematics
    Sameera Procter-Baines 3.18 Mathematics Engineering Biotech
    Shantale Tompkins 3.90 Engineering Mathematics Biotech
    Cornellius Turney 3.22 Physics Mathematics Engineering
    Blia Sagar 3.44 Physics Chemistry Biotech
    Wynn Crampton 3.51 Mathematics Chemistry Engineering
    Linda Risley 3.22 Chemistry Physics Mathematics
    Divina Butterworth 3.27 Mathematics Chemistry Biotech
    Meshell Otway-Ruthven 3.89 Engineering Biotech Mathematics
    Ammon Janssen 3.16 Physics Engineering Mathematics
    Maila Greg 3.14 Mathematics Biotech Chemistry
    Madiha Milligan 3.25 Physics Engineering Chemistry
    Humphrey Spakeman 3.44 Chemistry Biotech Mathematics
    Marygrace Wheelton 3.58 Mathematics Engineering Biotech
    Takyra Sieminski 3.97 Engineering Mathematics Physics
    Jathan Birley 3.42 Physics Mathematics Engineering
    Tawnia Alcock 3.60 Biotech Chemistry Physics
    Quinisha Clarkson 3.52 Mathematics Chemistry Engineering
    Dashanna Herron 3.12 Physics Chemistry Mathematics
    Verlon Mcconnell 3.28 Mathematics Chemistry Biotech
    Tawsha Rodgers 3.79 Engineering Biotech Mathematics
    Derick Whatley 3.61 Physics Engineering Mathematics
    Tisheena Mckenney 3.18 Engineering Physics Biotech
    Kyona Catrol 3.25 Chemistry Biotech Mathematics
    Jamarl Delap 3.11 Engineering Biotech Mathematics
    Tulio Carloss 3.18 Mathematics Engineering Physics
    Kaylie Lanthis 3.22 Engineering Mathematics Biotech
    Martha Hatchard 3.22 Physics Mathematics Engineering
    Genee Mccrae 3.41 Biotech Chemistry Physics
    Luna Pheobe 3.55 Chemistry Mathematics Engineering
    Savvas Hjellstrom 2.77 Chemistry Biotech Mathematics
    Mehul Bull 3.21 Mathematics Physics Biotech
    Kennedy Barrett 3.90 Chemistry Biotech Mathematics
    Marquita Mcrae 3.51 Physics Engineering Biotech
    Natha Keefe 3.14 Engineering Biotech Chemistry
    Crescentia Dow 3.79 Chemistry Physics Mathematics
    Randon Bradhust 3.68 Biotech Engineering Chemistry
    Dashawn Bosley 3.54 Mathematics Chemistry Biotech
    Nicolasa Sumpter 3.82 Engineering Mathematics Biotech
    Cressie Gillespie 3.10 Physics Mathematics Engineering
    Tawny Crockett 3.01 Chemistry Biotech Physics
    Kennon Inverarity 3.50 Mathematics Engineering Chemistry
    Halima Brydone 3.72 Chemistry Physics Mathematics
    Esther Bratby 2.67 Mathematics Chemistry Biotech
    Lorry Bunger 3.79 Engineering Biotech Physics
    Fatemah Desavigny 3.00 Physics Mathematics Engineering
    Marti Mclaws 3.05 Engineering Chemistry Biotech
    Estephanie Phelps 3.21 Chemistry Physics Mathematics
    Tommi Peerless 3.85 Engineering Physics Mathematics
    Cynthia Hermitton 3.10 Engineering Biotech Chemistry
    Cheyla Hankinson 3.82 Engineering Mathematics Biotech
    Giovanna Keel 3.25 Physics Mathematics Engineering
    Narissa Worthington 3.30 Biotech Chemistry Mathematics
    Aundria Guthrie 3.51 Mathematics Chemistry Engineering
    Teneil Maclean 3.22 Mathematics Physics Chemistry
    Shealynn Melville 3.02 Mathematics Chemistry Physics
    Darrah Smyth 3.89 Physics Biotech Engineering
    Elroy Leyte 3.16 Engineering Physics Mathematics
    Jessye Allum 3.14 Mathematics Biotech Chemistry
    Pearl Pullins 3.25 Chemistry Engineering Mathematics
    Brittania Denny 3.71 Chemistry Physics Mathematics
    Mendy Macmillan 3.38 Biotech Engineering Mathematics
    Ramina Ogilvie 3.18 Mathematics Engineering Biotech
    Ronel Cowan 3.80 Engineering Mathematics Biotech
    Stacey Revill 3.92 Chemistry Physics Mathematics
    Mir Ashley 3.52 Mathematics Physics Chemistry
    Ayeshia Jackman 3.12 Chemistry Physics Mathematics
    Jordann Rives 3.28 Mathematics Chemistry Biotech
    Katrine Proby 3.77 Engineering Biotech Mathematics
    Jermain Stobbs 3.61 Physics Engineering Mathematics
    Sharief Macallister 3.18 Engineering Physics Biotech
    Shannette Cowie 3.25 Chemistry Biotech Mathematics
    Melena Hearn 3.11 Engineering Biotech Mathematics
    Moraima Kendell 3.18 Mathematics Engineering Physics
    Amira Giddings 3.22 Engineering Mathematics Physics
    Tyrone Fern 3.00 Physics Mathematics Engineering
    Joaquin Mytton 3.28 Mathematics Chemistry Biotech
    Ehab Cocciardi 3.70 Engineering Biotech Mathematics
    Tamkia Fish 3.64 Physics Engineering Mathematics
    Deniz Blanchard 3.05 Engineering Biotech Chemistry
    Mira Riley 3.11 Chemistry Biotech Mathematics
    Loura Macansh 3.01 Engineering Physics Mathematics
    Nastassja Trustram 3.77 Mathematics Engineering Physics"""
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, TestCase
    from .application_list import application_list as application_list

    input_1 = ["1"]
    input_2 = ["23"]
    input_3 = ["10"]
    input_4 = ["15"]


    class TestAdmissionProcedure(StageTest):
        def generate(self):
            return [
                TestCase(stdin=input_1, attach=input_1, files={'applicants.txt': application_list}),
                TestCase(stdin=input_2, attach=input_2, files={'applicants.txt': application_list}),
                TestCase(stdin=input_3, attach=input_3, files={'applicants.txt': application_list}),
                TestCase(stdin=input_4, attach=input_4, files={'applicants.txt': application_list})
            ]

        @staticmethod
        def sort_by_priority(applicants, priority_n, departments_names, departments_lists, max_students):
            accepted_students = []
            for n, dep in enumerate(departments_names):
                dep_list = departments_lists[n]
                if len(dep_list) == max_students:
                    continue
                students_needed = max_students - len(dep_list)
                dep_applicants = [applicant[:2]
                                  for applicant in applicants if applicant[-1][priority_n] == dep]
                dep_applicants = sorted(dep_applicants, key=lambda x: (-x[1], x[0]))[:students_needed]
                departments_lists[n].extend(dep_applicants)
                accepted_students.extend([appl[0] for appl in dep_applicants])
            applicants = [applicant for applicant in applicants if applicant[0] not in accepted_students]
            return applicants, departments_lists

        @staticmethod
        def get_admission_lists(max_students):
            applicants = application_list.strip().split('\n')
            departments = sorted(['Mathematics', 'Physics', 'Biotech', 'Chemistry', 'Engineering'])
            applicants_data = []
            for line in applicants:
                line = line.split()
                line = [line[0] + ' ' + line[1]] + [float(line[2])] + [line[3:]]
                applicants_data.append(line)
            departments_lists = [[] for _ in departments]
            for i in range(len(applicants_data[-1][-1])):
                applicants_data, departments_lists = TestAdmissionProcedure.sort_by_priority(applicants_data,
                                                                                             i, departments,
                                                                                             departments_lists,
                                                                                             max_students)
            departments_lists = [[' '.join([str(el) for el in applicant])
                                  for applicant in sorted(dep, key=lambda x: (-x[1], x[0]))]
                                 for dep in departments_lists]
            return departments, departments_lists

        def check(self, reply: str, attach: list):
            n = int(attach[0])
            output = reply.strip().split('\n')
            output = [line for line in output if line.strip()]
            if not output:
                raise WrongAnswer("Your output seems to be empty.")
            department_names, admission_lists = self.get_admission_lists(n)
            correct_n_lines = len(department_names) + sum([len(dep_list) for dep_list in admission_lists])
            if len(output) != correct_n_lines:
                if correct_n_lines > len(output) > 0.75 * correct_n_lines:
                    for admission_list in admission_lists:
                        if all(admission_list) not in output:
                            raise WrongAnswer(f"Your output is supposed to include {len(admission_list)} applicants "
                                              f"for the {department_names[0]} department.\n"
                                              f"There are fewer than {n} students who chose {department_names[0]} as their first "
                                              f"priority, so in the first stage of admission the department should accept "
                                              f"all of them and then "
                                              f"try to accept more students to fill {n} student positions.\n"
                                              f"Make sure that you included those applicants who indicated the {department_names[0]} "
                                              f"department as their second or third priority and were not accepted to the "
                                              f"department of higher priority.")
                elif len(output) > correct_n_lines:
                    raise WrongAnswer("Your output is supposed to contain {0} lines with data (N={1}).\n"
                                      "However, {2} lines with data are found.\n"
                                      "Make sure you did not accept more than {1} students and "
                                      "the enrolled applicants does not occur more than once "
                                      "in the output.".format(correct_n_lines, n, len(output)))
                raise WrongAnswer("Your output is supposed to contain {0} lines with data (N={1}).\n"
                                  "However, {2} lines with data are found.".format(correct_n_lines, n, len(output)))

            for i, department_name in enumerate(department_names):
                if department_name.lower() not in output[0].lower():
                    raise WrongAnswer("The current line is supposed to contain the name of the department \"{0}\".\n"
                                      "However, this line contains the following data:\n"
                                      "\"{1}\"\n"
                                      "Make sure that you output the department names. \n"
                                      "Also, make sure that you output them "
                                      "in correct order.\n".format(department_name, output[0]))
                output = output[1:]
                correct_applicants = admission_lists[i]
                output_applicants, output = output[:len(correct_applicants)], output[len(correct_applicants):]
                for j, applicant in enumerate(correct_applicants):
                    output_applicant = output_applicants[j]
                    if applicant.lower().strip() not in output_applicant.lower():
                        raise WrongAnswer("Line {0} for the {1} department "
                                          "is supposed to contain the following applicant:\n"
                                          "\"{2}\"\n"
                                          "However, this line contains the following data:\n"
                                          "\"{3}\"\n"
                                          "Make sure the procedure of application is "
                                          "implemented correctly in your program.".format(j + 1,
                                                                                          department_name,
                                                                                          applicant,
                                                                                          output_applicant))

            return CheckResult.correct()


    if __name__ == '__main__':
        TestAdmissionProcedure().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TestAdmissionProcedure

    if __name__ == '__main__':
        TestAdmissionProcedure().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/12321#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 19 Jun 2023 12:10:16 UTC"
record: 4
