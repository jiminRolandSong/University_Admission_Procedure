type: edu
files:
- name: university.py
  visible: true
  text: |
    # write your code here
    first = float(input())
    second = float(input())
    third = float(input())
    score = (first + second + third) / 3.0
    print(score)
    if score >= 60:
        print("Congratulations, you are accepted!")
    else:
        print("We regret to inform you that we will not be able to offer you admission.")
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/application_list.py
  visible: false
  text: |-
    application_list = """Jermine Brunton 84 81 73 92 48 Physics Engineering Mathematics
    Justo Mirfin 71 77 61 60 41 Engineering Biotech Chemistry
    Uzma Naysmythe 60 94 75 71 80 Chemistry Engineering Mathematics
    Koury Wingo 71 81 81 83 59 Engineering Biotech Mathematics
    Kentrell Hillhouse 40 69 42 58 20 Mathematics Engineering Biotech
    Trica Macalpine 75 80 96 88 66 Engineering Mathematics Biotech
    Sang Muldoon 84 92 80 60 79 Physics Mathematics Engineering
    Laney Braithwaite 90 90 90 72 94 Physics Chemistry Mathematics
    Spring Burridge 71 84 98 71 50 Mathematics Chemistry Engineering
    Delta Fanny 84 85 83 86 49 Chemistry Physics Mathematics
    Elen Ashbury 54 76 88 62 60 Mathematics Chemistry Biotech
    Ruthanne Scaife 75 73 84 97 82 Engineering Biotech Mathematics
    Jaemi Hallets 81 71 73 86 78 Physics Engineering Mathematics
    Artavious Fay 71 77 61 60 61 Engineering Biotech Chemistry
    Franki Dinnis 60 94 75 71 80 Chemistry Biotech Mathematics
    Marlynn Favell 71 81 81 93 79 Engineering Biotech Mathematics
    Sameera Procter-Baines 70 59 72 68 80 Mathematics Engineering Biotech
    Shantale Tompkins 75 80 96 88 66 Engineering Mathematics Biotech
    Cornellius Turney 84 92 80 60 79 Physics Mathematics Engineering
    Blia Sagar 90 81 80 72 94 Physics Chemistry Biotech
    Wynn Crampton 71 84 98 71 50 Mathematics Chemistry Engineering
    Linda Risley 85 85 83 86 49 Chemistry Physics Mathematics
    Divina Butterworth 54 76 88 62 70 Mathematics Chemistry Biotech
    Meshell Otway-Ruthven 75 73 84 97 94 Engineering Biotech Mathematics
    Ammon Janssen 84 81 73 92 48 Physics Engineering Mathematics
    Maila Greg 71 77 61 60 49 Mathematics Biotech Chemistry
    Madiha Milligan 60 94 79 71 80 Physics Engineering Chemistry
    Humphrey Spakeman 71 81 81 83 89 Chemistry Biotech Mathematics
    Marygrace Wheelton 60 77 42 55 60 Mathematics Engineering Biotech
    Takyra Sieminski 74 80 96 92 66 Engineering Mathematics Physics
    Jathan Birley 84 92 80 60 79 Physics Mathematics Engineering
    Tawnia Alcock 81 80 90 72 91 Biotech Chemistry Physics
    Quinisha Clarkson 71 84 98 71 80 Mathematics Chemistry Engineering
    Dashanna Herron 80 85 73 86 89 Physics Chemistry Mathematics
    Verlon Mcconnell 84 61 88 62 60 Mathematics Chemistry Biotech
    Tawsha Rodgers 78 71 84 97 82 Engineering Biotech Mathematics
    Derick Whatley 81 91 73 80 78 Physics Engineering Mathematics
    Tisheena Mckenney 76 57 61 90 61 Engineering Physics Biotech
    Kyona Catrol 60 94 75 77 40 Chemistry Biotech Mathematics
    Jamarl Delap 92 81 85 93 79 Engineering Biotech Mathematics
    Tulio Carloss 66 59 82 64 60 Mathematics Engineering Physics
    Kaylie Lanthis 75 80 96 88 66 Engineering Mathematics Biotech
    Martha Hatchard 84 92 80 60 79 Physics Mathematics Engineering
    Genee Mccrae 90 81 80 72 94 Biotech Chemistry Physics
    Luna Pheobe 71 84 98 71 50 Chemistry Mathematics Engineering
    Savvas Hjellstrom 55 85 41 66 45 Chemistry Biotech Mathematics
    Mehul Bull 94 76 88 61 70 Mathematics Physics Biotech
    Kennedy Barrett 77 93 84 87 94 Chemistry Biotech Mathematics
    Marquita Mcrae 84 81 73 92 48 Physics Engineering Biotech
    Natha Keefe 71 67 53 60 31 Engineering Biotech Chemistry
    Crescentia Dow 86 94 85 51 80 Chemistry Physics Mathematics
    Randon Bradhust 72 88 85 83 59 Biotech Engineering Chemistry
    Dashawn Bosley 80 79 82 61 40 Mathematics Chemistry Biotech
    Nicolasa Sumpter 75 82 96 81 38 Engineering Mathematics Biotech
    Cressie Gillespie 85 92 82 70 59 Physics Mathematics Engineering
    Tawny Crockett 71 90 80 72 44 Chemistry Biotech Physics
    Kennon Inverarity 71 84 98 71 72 Mathematics Engineering Chemistry
    Halima Brydone 77 85 82 86 50 Chemistry Physics Mathematics
    Esther Bratby 55 76 88 62 30 Mathematics Chemistry Biotech
    Lorry Bunger 75 73 84 97 22 Engineering Biotech Physics
    Fatemah Desavigny 81 71 73 86 78 Physics Mathematics Engineering
    Marti Mclaws 71 71 61 60 41 Engineering Chemistry Biotech
    Estephanie Phelps 80 95 45 71 80 Chemistry Physics Mathematics
    Tommi Peerless 72 81 81 92 75 Engineering Physics Mathematics
    Cynthia Hermitton 70 59 62 88 80 Engineering Biotech Chemistry
    Cheyla Hankinson 75 80 86 88 36 Engineering Mathematics Biotech
    Giovanna Keel 84 71 76 80 79 Physics Mathematics Engineering
    Narissa Worthington 52 71 80 73 81 Biotech Chemistry Mathematics
    Aundria Guthrie 61 81 94 71 21 Mathematics Chemistry Engineering
    Teneil Maclean 85 63 84 45 69 Mathematics Physics Chemistry
    Shealynn Melville 74 76 88 62 70 Mathematics Chemistry Physics
    Darrah Smyth 75 73 84 97 94 Physics Biotech Engineering
    Elroy Leyte 84 81 73 92 48 Engineering Physics Mathematics
    Jessye Allum 71 77 61 60 49 Mathematics Biotech Chemistry
    Pearl Pullins 60 94 79 71 33 Chemistry Engineering Mathematics
    Brittania Denny 90 84 70 61 72 Chemistry Physics Mathematics
    Mendy Macmillan 61 81 81 70 51 Biotech Engineering Mathematics
    Ramina Ogilvie 80 65 70 68 29 Mathematics Engineering Biotech
    Ronel Cowan 75 80 96 88 66 Engineering Mathematics Biotech
    Stacey Revill 84 92 84 70 51 Chemistry Physics Mathematics
    Mir Ashley 71 84 98 71 83 Mathematics Physics Chemistry
    Ayeshia Jackman 80 85 73 86 89 Chemistry Physics Mathematics
    Jordann Rives 84 61 88 62 60 Mathematics Chemistry Biotech
    Katrine Proby 78 71 84 90 42 Engineering Biotech Mathematics
    Jermain Stobbs 81 91 73 80 78 Physics Engineering Mathematics
    Sharief Macallister 76 57 61 99 61 Engineering Physics Biotech
    Shannette Cowie 60 94 75 77 20 Chemistry Biotech Mathematics
    Melena Hearn 92 81 85 93 79 Engineering Biotech Mathematics
    Moraima Kendell 66 59 82 64 60 Mathematics Engineering Physics
    Amira Giddings 75 80 96 78 66 Engineering Mathematics Physics
    Tyrone Fern 64 92 80 52 79 Physics Mathematics Engineering
    Joaquin Mytton 54 76 88 62 60 Mathematics Chemistry Biotech
    Ehab Cocciardi 75 73 84 97 82 Engineering Biotech Mathematics
    Tamkia Fish 81 71 73 86 78 Physics Engineering Mathematics
    Deniz Blanchard 71 77 61 60 61 Engineering Biotech Chemistry
    Mira Riley 60 94 75 71 80 Chemistry Biotech Mathematics
    Loura Macansh 71 81 81 93 79 Engineering Physics Mathematics
    Nastassja Trustram 60 49 82 68 70 Mathematics Engineering Physics"""
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, TestCase
    from .application_list import application_list as application_list

    input_1 = ["5"]
    input_2 = ["23"]
    input_3 = ["10"]
    input_4 = ["15"]


    class TestAdmissionProcedure(StageTest):
        def generate(self):
            return [
                TestCase(stdin=input_1, attach=input_1, files={'applicants.txt': application_list}),
                TestCase(stdin=input_2, attach=input_2, files={'applicants.txt': application_list}),
                TestCase(stdin=input_3, attach=input_3, files={'applicants.txt': application_list}),
                TestCase(stdin=input_4, attach=input_4, files={'applicants.txt': application_list})
            ]

        @staticmethod
        def sort_by_priority(applicants, priority_n, departments_names, departments_lists, max_students, exams):

            def mean(numbers):
                return sum(numbers) / len(numbers)

            accepted_students = []
            for n, dep in enumerate(departments_names):
                dep_list = departments_lists[n]
                exam_numbers = exams[n]
                if len(dep_list) == max_students:
                    continue
                students_needed = max_students - len(dep_list)
                dep_applicants = []
                for applicant in applicants:
                    if applicant[-1][priority_n] != dep:
                        continue
                    mean_exam_score = mean([applicant[exam_n + 1] for exam_n in exam_numbers])
                    best_score = float(max([mean_exam_score, applicant[-2]]))
                    dep_applicants.append([applicant[0], best_score])

                dep_applicants = sorted(dep_applicants, key=lambda x: (-x[1], x[0]))[:students_needed]
                departments_lists[n].extend(dep_applicants)
                accepted_students.extend([appl[0] for appl in dep_applicants])
            applicants = [applicant for applicant in applicants if applicant[0] not in accepted_students]
            return applicants, departments_lists

        @staticmethod
        def get_admission_lists(max_students):
            applicants = application_list.strip().split('\n')
            departments = {'Mathematics': [2], 'Physics': [0, 2], 'Biotech': [1, 0], 'Chemistry': [1],
                           'Engineering': [3, 2]}
            exams = [departments[dep] for dep in sorted(departments)]
            departments = sorted(departments)
            applicants_data = []
            for line in applicants:
                line = line.split()
                line = [line[0] + ' ' + line[1]] + [float(element) for element in line[2:-3]] + [line[-3:]]
                applicants_data.append(line)
            departments_lists = [[] for _ in departments]
            for i in range(len(applicants_data[-1][-1])):
                applicants_data, departments_lists = TestAdmissionProcedure.sort_by_priority(applicants_data,
                                                                                             i, departments,
                                                                                             departments_lists,
                                                                                             max_students, exams)
            departments_lists = [[' '.join([str(el) for el in applicant])
                                  for applicant in sorted(dep, key=lambda x: (-x[1], x[0]))]
                                 for dep in departments_lists]
            return departments, departments_lists

        def check(self, reply: str, attach: list):
            n = int(attach[0])
            department_names, admission_lists = self.get_admission_lists(n)
            for i, department_name in enumerate(department_names):
                filename = department_name.lower() + ".txt"
                try:
                    with open(filename, "r", encoding="utf-8") as fh:
                        output_applicants = fh.read()
                except FileNotFoundError:
                    raise WrongAnswer("The file {0} is not found.\n"
                                      "Please make sure that you output results to files\n"
                                      "and specify the correct paths for them.".format(filename))

                if not output_applicants:
                    raise WrongAnswer("The file for the {0} department is empty.".format(department_name))
                output_applicants = output_applicants.strip().split('\n')
                output_applicants = [line for line in output_applicants if line.strip()]
                correct_applicants = admission_lists[i]
                if len(correct_applicants) != len(output_applicants):
                    raise WrongAnswer("The file for the {0} department is expected to contain {1} line(s).\n"
                                      "However, {2} lines are found.".format(department_name, len(correct_applicants),
                                                                             len(output_applicants)))

                for j, applicant in enumerate(correct_applicants):
                    applicant_name, applicant_surname, score = applicant.split()
                    applicant_name = "{0} {1}".format(applicant_name, applicant_surname)
                    score = round(float(score), 2)
                    output_applicant = output_applicants[j].strip().split(' ')
                    if len(output_applicant) != 3:
                        raise WrongAnswer("Line {0} for the {1} department "
                                          "does not seem to contain three elements: first name, last name and score.\n"
                                          "Make sure you separate them "
                                          "with one whitespace character.".format(j + 1,
                                                                                  department_name))
                    output_applicant_name = "{0} {1}".format(output_applicant[0], output_applicant[1])
                    try:
                        output_score = round(float(output_applicant[-1]), 2)
                    except ValueError:
                        raise WrongAnswer("The second element in line {0} for the {1} department\n"
                                          "does not seem to be a number: \"{2}\". \n"
                                          "Make sure you format the output "
                                          "as stated in the example.".format(j + 1,
                                                                             department_name,
                                                                             output_applicant[1]))
                    if applicant_name.lower().strip() not in output_applicant_name.lower():
                        raise WrongAnswer("The first element in line {0} for the {1} department\n"
                                          "does not seem to contain the correct name of the student ({2}).\n"
                                          "Instead, it is equal to \"{3}\"".format(j + 1, department_name,
                                                                                   applicant_name,
                                                                                   output_applicant_name))

                    if score != output_score:
                        raise WrongAnswer("The second element in line {0} for the {1} department\n"
                                          "does not seem to contain the correct score of the student ({2}).\n"
                                          "Instead, it is equal to \"{3}\"".format(j + 1, department_name,
                                                                                   score,
                                                                                   output_score))

            return CheckResult.correct()


    if __name__ == '__main__':
        TestAdmissionProcedure().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TestAdmissionProcedure

    if __name__ == '__main__':
        TestAdmissionProcedure().run_tests()
  learner_created: false
- name: physics.txt
  visible: true
  text: |
    Laney Braithwaite 90.0
    Blia Sagar 85.0
    Cressie Gillespie 83.5
    Cornellius Turney 82.0
    Jathan Birley 82.0
    Martha Hatchard 82.0
    Sang Muldoon 82.0
    Giovanna Keel 80.0
    Darrah Smyth 79.5
    Ammon Janssen 78.5
    Jermine Brunton 78.5
    Marquita Mcrae 78.5
    Derick Whatley 77.0
    Fatemah Desavigny 77.0
    Jaemi Hallets 77.0
  learner_created: true
- name: biotech.txt
  visible: true
  text: |
    Genee Mccrae 85.5
    Tawnia Alcock 80.5
    Randon Bradhust 80.0
    Humphrey Spakeman 76.0
    Koury Wingo 76.0
    Marlynn Favell 76.0
    Katrine Proby 74.5
    Artavious Fay 74.0
    Deniz Blanchard 74.0
    Jessye Allum 74.0
    Justo Mirfin 74.0
    Maila Greg 74.0
    Mendy Macmillan 71.0
    Savvas Hjellstrom 70.0
    Narissa Worthington 61.5
  learner_created: true
- name: mathematics.txt
  visible: true
  text: |
    Kennon Inverarity 98.0
    Mir Ashley 98.0
    Quinisha Clarkson 98.0
    Spring Burridge 98.0
    Wynn Crampton 98.0
    Aundria Guthrie 94.0
    Divina Butterworth 88.0
    Elen Ashbury 88.0
    Esther Bratby 88.0
    Joaquin Mytton 88.0
    Jordann Rives 88.0
    Mehul Bull 88.0
    Shealynn Melville 88.0
    Verlon Mcconnell 88.0
    Teneil Maclean 84.0
  learner_created: true
- name: chemistry.txt
  visible: true
  text: |
    Estephanie Phelps 95.0
    Crescentia Dow 94.0
    Franki Dinnis 94.0
    Kyona Catrol 94.0
    Mira Riley 94.0
    Pearl Pullins 94.0
    Shannette Cowie 94.0
    Uzma Naysmythe 94.0
    Kennedy Barrett 93.0
    Stacey Revill 92.0
    Tawny Crockett 90.0
    Ayeshia Jackman 85.0
    Delta Fanny 85.0
    Halima Brydone 85.0
    Linda Risley 85.0
  learner_created: true
- name: engineering.txt
  visible: true
  text: |
    Takyra Sieminski 94.0
    Kaylie Lanthis 92.0
    Ronel Cowan 92.0
    Shantale Tompkins 92.0
    Trica Macalpine 92.0
    Ehab Cocciardi 90.5
    Lorry Bunger 90.5
    Meshell Otway-Ruthven 90.5
    Ruthanne Scaife 90.5
    Tawsha Rodgers 90.5
    Jamarl Delap 89.0
    Melena Hearn 89.0
    Nicolasa Sumpter 88.5
    Amira Giddings 87.0
    Cheyla Hankinson 87.0
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12324#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 29 Jun 2023 13:18:16 UTC"
record: -1
